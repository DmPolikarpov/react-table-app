{"version":3,"sources":["components/TableContent/TableContent.js","components/Paginator/Paginator.js","components/Searchbox/Searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Table","allComments","useState","sortedColumn","setSortedColumn","sort","a","b","ascOrder","name","sortItems","param","className","onClick","map","comment","id","email","body","Paginator","notesPerPage","comments","paginatorButton","pageNumber","i","Math","ceil","length","push","page","Searchbox","searchChange","type","placeholder","onChange","App","setComments","setError","setIsLoaded","currentPage","setCurrentPage","searchField","setSearchField","useEffect","fetch","then","res","json","result","error","filteredComments","filter","filteredComment","toLowerCase","includes","lastNoteInPage","firstNoteInPage","notesInCurrentPage","slice","style","textAlign","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb86055.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './TableContent.css';\n\nlet Table = ({allComments}) => {\n    const [sortedColumn, setSortedColumn] = useState({});\n\n    if (sortedColumn != null) {\n        allComments = allComments.sort((a,b) => {\n            if (sortedColumn.ascOrder) {\n                if (a[sortedColumn.name] > b[sortedColumn.name]) {\n                    return 1;\n                } else {\n                    return -1;\n                } \n            } else {\n                if (a[sortedColumn.name] < b[sortedColumn.name]) {\n                    return 1;\n                } else {\n                    return -1;\n                } \n            }\n        })\n    }\n\n    let sortItems = param => {\n        if (sortedColumn.name === param && sortedColumn.ascOrder) {\n            setSortedColumn({name: param, ascOrder: false})\n        } else {\n            setSortedColumn({name: param, ascOrder: true})\n        }\n        \n    }   \n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th className=\"id\" onClick={() => {sortItems(\"id\")}}>ID</th>\n                    <th className=\"name\" onClick={() => {sortItems(\"name\")}}>Name</th>\n                    <th className=\"email\" onClick={() => {sortItems(\"email\")}}>email</th>\n                    <th className=\"body\" onClick={() => {sortItems(\"body\")}}>Body</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                allComments.map( comment => (\n                    <tr key={comment.id}>\n                        <td className=\"id\">{comment.id}</td> \n                        <td className=\"name\">{comment.name}</td> \n                        <td className=\"email\">{comment.email}</td> \n                        <td className=\"body\">{comment.body}</td> \n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table;\n","import React from 'react';\nimport './Paginator.css';\n\nlet Paginator = ({notesPerPage, comments, paginatorButton}) => {\n    let pageNumber = [];\n    for (let i = 1; i <= Math.ceil(comments.length / notesPerPage); i++) {\n        pageNumber.push(i);\n    }\n    return (\n        <div className=\"paginator\">\n            {\n                pageNumber.map(page => (\n                    <p key={page} onClick={() => {paginatorButton(page)}}>{page}</p>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Paginator;\n","import React from 'react';\nimport './Searchbox.css';\n\nlet Searchbox = ({searchChange}) => {\n    return (\n        <div className='search'>\n            <input \n                type='search' \n                placeholder='search something' \n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default Searchbox;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Table from './components/TableContent/TableContent';\nimport Paginator from './components/Paginator/Paginator';\nimport Searchbox from './components/Searchbox/Searchbox';\n\nfunction App() {\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [notesPerPage, setNotesPerPage] = useState(50);\n  const [searchField, setSearchField] = useState('');\n  \n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/comments\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setComments(result);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  let onSearchChange = (e) => {\n    setSearchField(e.target.value);\n  }\n  let filteredComments = comments.filter(comment => {\n    let filteredComment;\n    let name = comment.name.toLowerCase().includes(searchField.toLowerCase());\n    let email = comment.email.toLowerCase().includes(searchField.toLowerCase());\n    let body = comment.body.toLowerCase().includes(searchField.toLowerCase());\n    if (comment.id === searchField | name | email | body) {\n      filteredComment = comment;\n    }\n    return filteredComment;\n  })\n  const lastNoteInPage = currentPage * notesPerPage;\n  const firstNoteInPage = lastNoteInPage - notesPerPage;\n  let notesInCurrentPage = filteredComments.slice(firstNoteInPage, lastNoteInPage); \n\n  let paginatorButton = currentPage => {setCurrentPage(currentPage)};\n\n  return (\n    <div className=\"App\">\n      <div style={{textAlign : \"center\"}}><h1>Comments</h1></div>\n      <Searchbox searchChange={onSearchChange} />\n      <Table allComments={notesInCurrentPage} />\n      <Paginator \n        comments={filteredComments} \n        notesPerPage={notesPerPage} \n        paginatorButton={paginatorButton}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}